### INTEL LICENSE STARTS BELOW
# INTEL CONFIDENTIAL
# Copyright (C) 2021-2022 Intel Corporation
# This software and the related documents are Intel copyrighted materials, and your use of them is governed by the express license under which they were provided to you ("License"). Unless the License provides otherwise, you may not use, modify, copy, publish, distribute, disclose or transmit this software or the related documents without Intel's prior written permission.
# This software and the related documents are provided as is, with no express or implied warranties, other than those that are expressly stated in the License.
### INTEL LICENSE END
---
- name: Prepare list of device blocks
  ansible.builtin.set_fact:
    list_of_disks: []

- name: Get temporary disk device block if it exists
  ansible.builtin.command: blkid -L "Temporary Storage"
  changed_when: false
  register: temporary_disk_device
  ignore_errors: true

- name: Update available devices
  ansible.builtin.set_fact:
    available_devices: "{{ available_devices | combine({ temporary_disk_device.stdout[:-1]: 'temp_disk'}) }}"
  when: not temporary_disk_device.failed

- name: Get temporary disk default mount point if it exists
  ansible.builtin.set_fact:
    temporary_mount_point: "{{ item.mount }}"
  when: "not temporary_disk_device.failed and item.device == temporary_disk_device.stdout"
  loop: "{{ ansible_facts['mounts'] | flatten(1) }}"

- name: Get data disk device block if it exists
  ansible.builtin.set_fact:
    available_devices: "{{ available_devices | combine({ '/dev/' + item: 'data_disk'}) }}"
  when:
    - ansible_devices[item].partitions == {}
    - '"sd" in item'
    - '"/dev/" + item not in available_devices'
  loop: "{{ ansible_facts['devices'] | flatten(1) }}"

- name: Unmount temporary disk from default mount point if it exists
  mount:
    path: "{{ temporary_mount_point }}"
    state: unmounted
  when: temporary_mount_point is defined
  become: true

- name: Remove temporary disk from fstab
  ansible.builtin.lineinfile:
    path: "{{ fstab_path }}"
    state: absent
    search_string: "{{ temporary_mount_point }}"
  when: temporary_mount_point is defined
  become: true

- name: Assign configuration to proper device blocks
  ansible.builtin.set_fact:
    list_of_disks: "{{ list_of_disks + [ item.0 | combine({'device_block': item.1.key}) ] }}"
  when: "item.0.type == item.1.value and item.0.device_block is not defined"
  loop: "{{ disks_conf|product(available_devices | dict2items)|list }}"
